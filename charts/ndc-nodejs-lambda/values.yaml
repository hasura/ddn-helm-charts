namespace: "default"
useReleaseName: true

additionalAnnotations: |
  checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}

# Container Configs
image:
  repository: "ghcr.io/hasura/ndc-nodejs-lambda"
  tag: "latest"
  pullPolicy: Always
  otelCollectorRepository: otel/opentelemetry-collector-contrib
  otelCollectorTag: 0.104.0
replicas: "1"
wsInactiveExpiryMins: "1"
securityContext:
  runAsNonRoot: true
  runAsGroup: 1000
  runAsUser: 100
  fsGroup: 1000

initContainers:
  gitSync:    
    enabled: false
    repo: "git@github.com:hasura/ddn-example"
    branch: "main"

healthChecks:
  enabled: false
  livenessProbePath: "/healthz"
  readinessProbePath: "/healthz"

hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 4
  metrics: 
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50  # Target 50% CPU utilization per pod
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80  # Target 80% memory utilization per pod  

# Observability defaults are tuned for Hasura hosted Control Plane 
# Enable observability
observability:
  enabled: true

# Required (when observability.enabled is set to true)
dataPlane:
  id: ""
  key: ""

controlPlane:
  otlpEndpoint: https://gateway.otlp.hasura.io:443
  oauthTokenEndpoint: https://ddn-oauth.pro.hasura.io/oauth2/token

otel:
  config: |
    extensions:
      oauth2client:
        client_id: {{ .Values.dataPlane.id }}
        client_secret: {{ .Values.dataPlane.key }}
        token_url: {{ .Values.controlPlane.oauthTokenEndpoint }}
        scopes: ["opentelemetry:write"]
        endpoint_params:
          audience: https://ddn.hasura.io
    exporters:
      otlp/oauth:
        endpoint: {{ .Values.controlPlane.otlpEndpoint }}
        auth:
          authenticator: oauth2client
    processors:
      batch: {}
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    service:
      extensions: [oauth2client]
      pipelines:
        logs:
          exporters:
            - otlp/oauth
          processors:
            - batch
          receivers:
            - otlp
        metrics:
          exporters:
            - otlp/oauth
          processors:
            - batch
          receivers:
            - otlp
        traces:
          exporters:
            - otlp/oauth
          processors:
            - batch
          receivers:
            - otlp  

extraVolumes: |
  {{- if .Values.observability.enabled }}
  - name: otel-config
    secret:
      secretName: {{ printf "%s-secret" (include "common.name" .) }} 
      items:
        - key: otel-collector-config.yaml
          path: otel-collector-config.yaml
  {{- end }}

extraContainers: |
  {{- if .Values.observability.enabled }}
  - name: "otel-collector"
    command:
      - --config=/etc/otel-collector-config.yaml 
    command: 
    image: {{ template "common.image" (dict "Values" $.Values "repository" .Values.image.otelCollectorRepository "tag" .Values.image.otelCollectorTag) }} 
    env:
    - name: "OTEL_ENDPOINT"
      value: "{{ .Values.controlPlane.otlpEndpoint }}"      
    volumeMounts:
      - name: otel-config
        mountPath: "/etc/otelcol-contrib/config.yaml" 
        subPath: otel-collector-config.yaml
  {{- end }}

resources: |
  requests:
    cpu: "500m"
    memory: "500Mi"
  limits:
    cpu: "1"
    memory: "1Gi"

connectorEnvVars:
  HASURA_SERVICE_TOKEN_SECRET: ""

env: |
  - name: HASURA_SERVICE_TOKEN_SECRET
    valueFrom:
      secretKeyRef:
        key: HASURA_SERVICE_TOKEN_SECRET
        name: {{ printf "%s-secret" (include "common.name" .) }}
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    value: http://localhost:4317
