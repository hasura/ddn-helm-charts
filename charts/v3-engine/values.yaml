namespace: "default"
useReleaseName: true

additionalAnnotations: |
  checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}

image:
  # Full path to custom created image
  repository: ghcr.io/hasura/v3-engine
  tag: "latest"
  pullPolicy: Always
  otelCollectorRepository: otel/opentelemetry-collector-contrib
  otelCollectorTag: 0.104.0

initContainers:
  gitSync:    
    enabled: false
    repo: "git@github.com:<org>/<repo>"
    branch: "main"

healthChecks:
  enabled: true
  livenessProbePath: "/health"
  readinessProbePath: "/health"

hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 4
  metrics: 
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50  # Target 50% CPU utilization per pod
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80  # Target 80% memory utilization per pod

otel:
  deployOtelCollector: false
  endpoint: https://gateway.otlp.hasura.io:443
  dataPlaneID: ""
  dataPlaneKey: ""
  oauthTokenEndpoint: https://ddn-oauth.pro.hasura.io/oauth2/token
  hasuraCanonicalHost: ""
  config: |
    extensions:
      oauth2client:
        client_id: {{ .Values.otel.dataPlaneID }}
        client_secret: {{ .Values.otel.dataPlaneKey}}
        token_url: {{ .Values.otel.oauthTokenEndpoint }}
        scopes: ["opentelemetry:write"]
        endpoint_params:
          audience: https://ddn.hasura.io
    exporters:
      otlp/oauth:
        endpoint: {{ .Values.otel.endpoint }}
        auth:
          authenticator: oauth2client
    processors:
      batch: {}
      attributes/host:
        actions:
          - key: http.host
            action: upsert
            value: {{ .Values.otel.hasuraCanonicalHost }}      
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    service:
      extensions: [oauth2client]
      pipelines:
        logs:
          exporters:
            - otlp/oauth
          processors:
            - batch
          receivers:
            - otlp
        metrics:
          exporters:
            - otlp/oauth
          processors:
            - batch
          receivers:
            - otlp
        traces:
          exporters:
            - otlp/oauth
          processors:
            - batch
            - attributes/host
          receivers:
            - otlp  

openDDPath: /md/open_dd.json
authnConfigPath: /md/auth_config.json

# Configure as below when using git-sync; here repo is the repo name
# openDDPath: /work-dir/<repo>/output/open_dd.json
# Path to auth_config.json
# authnConfigPath: /work-dir/<repo>/output/auth_config.json
# Enable CORS by sending appropriate headers
enableCors: true

extraVolumes: |
  {{- if .Values.otel.deployOtelCollector }}
  - name: otel-config
    secret:
      secretName: {{ printf "%s-secret" (include "common.name" .) }} 
      items:
        - key: otel-collector-config.yaml
          path: otel-collector-config.yaml
  {{- end }}

extraContainers: |
  {{- if .Values.otel.deployOtelCollector }}
  - name: "otel-collector"
    command:
      - --config=/etc/otel-collector-config.yaml 
    command:   
    image: {{ template "common.image" (dict "Values" $.Values "repository" .Values.image.otelCollectorRepository "tag" .Values.image.otelCollectorTag) }} 
    env:
    - name: "OTEL_ENDPOINT"
      value: "{{ .Values.otel.endpoint }}"      
    volumeMounts:
      - name: otel-config
        mountPath: "/etc/otelcol-contrib/config.yaml" 
        subPath: otel-collector-config.yaml
  {{- end }}

securityContext:
  runAsNonRoot: true
  runAsGroup: 1000
  runAsUser: 100
  fsGroup: 1000
httpPort: 3000
replicas: 1
resources: |
  requests:
    cpu: "1"
    memory: "1Gi"
  limits:
    cpu: "2"
    memory: "2Gi"

env: |
  - name: METADATA_PATH
    value: {{ .Values.openDDPath | quote }}
  - name: AUTHN_CONFIG_PATH
    value: {{ .Values.authnConfigPath | quote }}
  - name: ENABLE_CORS
    value: {{ .Values.enableCors | quote }}
  - name: OTLP_ENDPOINT
    value: http://localhost:4317

# ingress:
#   enabled: true
#   hostName: '{{ template "v3-st.domain" . }}'
#   additionalAnnotations: '{{ template "v3-st.ingress.annotations" . }}'
#   path: '{{ template "v3-st.path" . }}'
